- name: Get SSL certificates from Kubernetes secrets
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ item.name }}"
    namespace: "{{ item.namespace | default('default') }}"
    kubeconfig: "{{ kubeconfig_path }}"
  register: ssl_secrets
  delegate_to: localhost
  become: false
  run_once: true
  loop: "{{ ssl_secret_list }}"
  tags: [nginx, ssl-certs]

- name: debug
  debug:
    msg: "{{ ssl_secrets }}"

- name: Ensure ssl paths exist
  ansible.builtin.file:
    path: "/etc/nginx/ssl/{{ item.cert_name | default(item.name) }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0755'
  loop: "{{ ssl_secret_list }}"
  tags: [nginx, ssl-certs]

- name: Copy SSL certificates from Kubernetes secrets
  ansible.builtin.copy:
    content: "{{ ssl_secrets.results[ansible_loop.index0].resources[0].data['tls.crt'] | b64decode }}"
    dest: "/etc/nginx/ssl/{{ item.cert_name | default(item.name) }}/fullchain.pem"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  loop: "{{ ssl_secret_list }}"
  loop_control:
    extended: true
  tags: [nginx, ssl-certs]
  notify: restart nginx
  when: ssl_secrets.results[ansible_loop.index0].resources | length > 0

- name: Copy SSL private keys from Kubernetes secrets
  ansible.builtin.copy:
    content: "{{ ssl_secrets.results[ansible_loop.index0].resources[0].data['tls.key'] | b64decode }}"
    dest: "/etc/nginx/ssl/{{ item.cert_name | default(item.name) }}/privkey.pem"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0600'
  loop: "{{ ssl_secret_list }}"
  loop_control:
    extended: true
  tags: [nginx, ssl-certs]
  notify: restart nginx
  when: ssl_secrets.results[ansible_loop.index0].resources | length > 0

- name: Copy CA certificates from Kubernetes secrets (if present)
  ansible.builtin.copy:
    content: "{{ ssl_secrets.results[ansible_loop.index0].resources[0].data['ca.crt'] | b64decode }}"
    dest: "/etc/nginx/ssl/{{ item.cert_name | default(item.name) }}/ca.pem"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  loop: "{{ ssl_secret_list }}"
  loop_control:
    extended: true
  tags: [nginx, ssl-certs]
  notify: restart nginx
  when:
    - ssl_secrets.results[ansible_loop.index0].resources | length > 0
    - ssl_secrets.results[ansible_loop.index0].resources[0].data['ca.crt'] is defined

- name: Generate nginx config for each certificate
  ansible.builtin.template:
    src: "{{ playbook_dir }}/../group_files/_services/kardi-proxy/kardi-proxy.conf.j2"
    dest: "/etc/nginx/conf.d/{{ item.cert_name | default(item.name) }}.conf"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: '0644'
  loop: "{{ ssl_secret_list }}"
  vars:
    kardiai_proxy_hosts: "{{ item.server_name | default(item.cert_name | default(item.name)) }}"
    kardiai_ssl_cert_path: "/etc/nginx/ssl/{{ item.cert_name | default(item.name) }}/fullchain.pem"
    kardiai_ssl_key_path: "/etc/nginx/ssl/{{ item.cert_name | default(item.name) }}/privkey.pem"
    global_accelerator_dns: "{{ upstream | default('dummy') }}"
  tags: [nginx, proxy-config]
  notify: restart nginx

- name: Cleanup - Build excludes list
  set_fact:
    nginx_config_excludes: "{{ nginx_config_excludes | default([]) + [(item.cert_name | default(item.name)) + '.conf'] }}"
  loop: "{{ ssl_secret_list }}"
  tags: [nginx, cleanup]

- name: Cleanup - Add default.conf to excludes
  set_fact:
    nginx_config_excludes: "{{ nginx_config_excludes + ['default.conf'] }}"
  tags: [nginx, cleanup]

- name: Cleanup - Remove old nginx config files
  ansible.builtin.find:
    paths: "/etc/nginx/conf.d/"
    patterns: "*.conf"
    excludes: "{{ nginx_config_excludes }}"
  register: old_configs
  tags: [nginx, cleanup]

#- name: Cleanup - get list of nginx config files to keep
#  ansible.builtin.find:
#    paths: "/etc/nginx/conf.d/"
#    patterns: "*.conf"
#    excludes: "{{ (ssl_secret_list | map('extract', ['cert_name', 'name']) | map('first') | map('regex_replace', '^(.*)$', '\\1.conf') | list) + ['default.conf'] }}"
#  register: old_configs
#  tags: [nginx, cleanup]


- name: Cleanup - Delete rest of nginx config files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
#    backup: yes
  loop: "{{ old_configs.files }}"
  tags: [nginx, cleanup]
  notify: restart nginx
